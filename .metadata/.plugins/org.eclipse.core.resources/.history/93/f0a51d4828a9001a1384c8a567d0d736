package com.cos.blog.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.cos.blog.db.DBConn;
import com.cos.blog.dto.DetailResponseDto;
import com.cos.blog.model.Board;

import lombok.Builder;

// DAO
public class BoardRepository {
	
	private static final String TAG = "BoardRepository : ";
	private static BoardRepository instance = new BoardRepository();
	private BoardRepository() {}
	public static BoardRepository getInstance() {
		return instance;
	}
	
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	
	public int save(Board board) {
		final String SQL = "insert into board(id, userid, title, content,  createDate)"
						 + "values(BOARD_SEQ.nextval, ?, ?,  ?,sysdate)";
				         
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			
			// 물음표 완성하기
			pstmt.setInt(1, board.getUserId());
			pstmt.setString(2,board.getTitle());
			pstmt.setString(3,board.getContent());
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG + "save : "+e.getMessage());
		} finally {
			DBConn.close(conn, pstmt);
		}
		return -1;
	}
	
	public int update(Board board) {
		final String SQL = "";
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			// 물음표 완성하기
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG+"update : "+e.getMessage());
		} finally {
			DBConn.close(conn, pstmt);
		}

		return -1;
	}
	
	public int deleteById(int id) {
		final String SQL = "";
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			// 물음표 완성하기
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG+"deleteById : "+e.getMessage());
		} finally {
			DBConn.close(conn, pstmt);
		}

		return -1;
	}
	
	public List<Board> findAll() {
		final String SQL = "select * from board order by id desc";
		List<Board> boards = new ArrayList<>();
		
		try {
			
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			
			// while 돌려서 rs -> java오브젝트에 집어넣기
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Board board = new Board(
					rs.getInt("id"),
					rs.getInt("userId"),
					rs.getString("title"),
					rs.getString("content"),
					rs.getInt("readCount"),
					rs.getTimestamp("createDate")
						);
				boards.add(board);
			}
			return boards;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG+"findAll : "+e.getMessage());
		} finally {
			DBConn.close(conn, pstmt, rs);
		}

		return null;
	}
	
	public Board findById(int id) {
		StringBuilder sb = new StringBuilder();
		sb.append("select b.id, b.userid, b.title, b.content, b.readCount, b.createdate, u.username");
		sb.append("from board b INNER JOIN users u");
		sb.append("on b.userid = u.id");
		sb.append("where b.id = 23");
		
		final String SQL = sb.toString();
		DetailResponseDto dto = null;		
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			// 물음표 완성하기
			pstmt.setInt(1, id);
			
			// if 돌려서 rs -> java오브젝트에 집어넣기
			if (rs.next()) {
				
				dto = new DetailResponseDto();
				Board board = Board.builder()
						.id(rs.getInt("b.id"))
						.title(rs.getString("b.title"))
						.content(rs.getString("b.content"))
						.readCount(rs.getInt("b.readCount"))
						.createDate(rs.getTimestamp("b.createDate"))
						.build();
					dto.setBoard(board);
					dto.setUsername(rs.getString("u.username"));
			}
			
			return dto;
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG+"findAll : "+e.getMessage());
		} finally {
			DBConn.close(conn, pstmt, rs);
		}

		return null;
	}
}